{"remainingRequest":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/thread-loader/dist/cjs.js!/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/babel-loader/lib/index.js!/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/ts-loader/index.js??ref--14-3!/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/eslint-loader/index.js??ref--13-0!/Users/kharelthompson/Coding/its-lit-app UPWORK/public/src/views/account/blog-post/your/your-blog-posts.component.ts?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/src/views/account/blog-post/your/your-blog-posts.component.ts","mtime":1618831816721},{"path":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/cache-loader/dist/cjs.js","mtime":1618827696254},{"path":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/thread-loader/dist/cjs.js","mtime":1618827696331},{"path":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/babel-loader/lib/index.js","mtime":1618827696227},{"path":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/ts-loader/index.js","mtime":1618827724380},{"path":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/eslint-loader/index.js","mtime":1618827722778}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9raGFyZWx0aG9tcHNvbi9Db2RpbmcvaXRzLWxpdC1hcHAgVVBXT1JLL3B1YmxpYy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL2toYXJlbHRob21wc29uL0NvZGluZy9pdHMtbGl0LWFwcCBVUFdPUksvcHVibGljL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL1VzZXJzL2toYXJlbHRob21wc29uL0NvZGluZy9pdHMtbGl0LWFwcCBVUFdPUksvcHVibGljL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiL1VzZXJzL2toYXJlbHRob21wc29uL0NvZGluZy9pdHMtbGl0LWFwcCBVUFdPUksvcHVibGljL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiL1VzZXJzL2toYXJlbHRob21wc29uL0NvZGluZy9pdHMtbGl0LWFwcCBVUFdPUksvcHVibGljL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVTdXBlciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gInRzbGliIjsKaW1wb3J0IFZ1ZVdyYXBwZXIgZnJvbSAnQC9jb21wb25lbnRzL2NvcmUvVnVlL3Z1ZS53cmFwcGVyJzsKaW1wb3J0IHsgZnJvbU5vdyB9IGZyb20gJ0AvZ2xvYmFscyc7CmltcG9ydCB7IEJsb2dQb3N0U2VydmljZSwgQ29yZVNlcnZpY2UsIEZpcmViYXNlU2VydmljZSwgTG9hZGVyU2VydmljZSwgU2Vzc2lvbiB9IGZyb20gJ0Avc2RrJzsKaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7Cgp2YXIgWW91ckJsb2dQb3N0c0NvbXBvbmVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1Z1ZVdyYXBwZXIpIHsKICBfaW5oZXJpdHMoWW91ckJsb2dQb3N0c0NvbXBvbmVudCwgX1Z1ZVdyYXBwZXIpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFlvdXJCbG9nUG9zdHNDb21wb25lbnQpOwoKICBmdW5jdGlvbiBZb3VyQmxvZ1Bvc3RzQ29tcG9uZW50KCkgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBZb3VyQmxvZ1Bvc3RzQ29tcG9uZW50KTsKCiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgX3RoaXMuQmxvZ1Bvc3RTcnYgPSBuZXcgQmxvZ1Bvc3RTZXJ2aWNlKCk7CiAgICBfdGhpcy5Mb2FkZXJTcnYgPSBuZXcgTG9hZGVyU2VydmljZSgpOwogICAgX3RoaXMuRmlyZWJhc2VTcnYgPSBuZXcgRmlyZWJhc2VTZXJ2aWNlKCk7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoWW91ckJsb2dQb3N0c0NvbXBvbmVudCwgW3sKICAgIGtleTogImNyZWF0ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAgIHRoaXMuZ2V0QmxvZ1Bvc3RzKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0QmxvZ1Bvc3RzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCbG9nUG9zdHMoKSB7CiAgICAgIHRoaXMuQmxvZ1Bvc3RTcnYuZ2V0QmxvZ1Bvc3RzKG5ldyBTZXNzaW9uKCkuU2Vzc2lvblZhbHVlLklkKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJkZWxldGVQb3N0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZGVsZXRlUG9zdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShwb3N0SWQpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIWNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgeW91ciBwb3N0PycpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbmV3IExvYWRlclNlcnZpY2UoKS5zaG93RnVsbFNjcmVlbkxvYWRlcignRGVsZXRpbmcgdGhlIHBvc3QuLi4nKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5GaXJlYmFzZVNydi5EYi5jb2xsZWN0aW9uKCdwb3N0cycpLmRvYyhwb3N0SWQpLmRlbGV0ZSgpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBuZXcgQ29yZVNlcnZpY2UoKS5zaG93QWxlcnQoJ1Bvc3QgaGFzIGJlZW4gZGVsZXRlZCBzdWNjZXNzZnVsbHkuJyk7CiAgICAgICAgICAgICAgICB0aGlzLmdldEJsb2dQb3N0cygpOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA5OwogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIG5ldyBDb3JlU2VydmljZSgpLnNob3dBbGVydCh0aGlzLkZpcmViYXNlU3J2LmdldEVycm9yTWVzc2FnZShfY29udGV4dC50MCksICdlcnJvcicpOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDEyOwogICAgICAgICAgICAgICAgbmV3IExvYWRlclNlcnZpY2UoKS5oaWRlRnVsbFNjcmVlbkxvYWRlcigpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgxMik7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzIsIDksIDEyLCAxNV1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZGVsZXRlUG9zdChfeCkgewogICAgICAgIHJldHVybiBfZGVsZXRlUG9zdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZGVsZXRlUG9zdDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImdldEZyb21Ob3ciLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZyb21Ob3cocG9zdCkgewogICAgICByZXR1cm4gZnJvbU5vdyhwb3N0LkRhdGUuc2Vjb25kcyk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gWW91ckJsb2dQb3N0c0NvbXBvbmVudDsKfShWdWVXcmFwcGVyKTsKCllvdXJCbG9nUG9zdHNDb21wb25lbnQgPSBfX2RlY29yYXRlKFtDb21wb25lbnRdLCBZb3VyQmxvZ1Bvc3RzQ29tcG9uZW50KTsKZXhwb3J0IGRlZmF1bHQgWW91ckJsb2dQb3N0c0NvbXBvbmVudDs="},{"version":3,"sources":["/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/eslint-loader/index.js??ref--13-0!/Users/kharelthompson/Coding/its-lit-app UPWORK/public/src/views/account/blog-post/your/your-blog-posts.component.ts?vue&type=script&lang=ts&"],"names":[],"mappings":";;;;;;;AAAA,OAAO,UAAP,MAAuB,mCAAvB;AACA,SAAS,OAAT,QAAwB,WAAxB;AACA,SAEE,eAFF,EAGE,WAHF,EAIE,eAJF,EAKE,aALF,EAME,OANF,QAOO,OAPP;AAQA,SAAS,SAAT,QAA0B,wBAA1B;;AAGA,IAAqB,sBAArB;AAAA;;AAAA;;AAAA,oCAAA;AAAA;;AAAA;;;AACU,UAAA,WAAA,GAAc,IAAI,eAAJ,EAAd;AACA,UAAA,SAAA,GAAY,IAAI,aAAJ,EAAZ;AACA,UAAA,WAAA,GAAc,IAAI,eAAJ,EAAd;AAHV;AAkCC;;AAlCD;AAAA;AAAA,WAKS,mBAAO;AACZ,WAAK,YAAL;AACD;AAPH;AAAA;AAAA,WASS,wBAAY;AACjB,WAAK,WAAL,CAAiB,YAAjB,CAA8B,IAAI,OAAJ,GAAc,YAAd,CAA4B,EAA1D;AACD;AAXH;AAAA;AAAA;AAAA,gFAaS,iBAAiB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,qBACD,OAAO,CAAC,4CAAD,CADN;AAAA;AAAA;AAAA;;AAEH,oBAAI,aAAJ,GAAoB,oBAApB,CAAyC,sBAAzC;AAFG;AAAA;AAAA,uBAIK,KAAK,WAAL,CAAiB,EAAjB,CAAoB,UAApB,CAA+B,OAA/B,EAAwC,GAAxC,CAA4C,MAA5C,EAAoD,MAApD,EAJL;;AAAA;AAKD,oBAAI,WAAJ,GAAkB,SAAlB,CAA4B,qCAA5B;AACA,qBAAK,YAAL;AANC;AAAA;;AAAA;AAAA;AAAA;AAQD,oBAAI,WAAJ,GAAkB,SAAlB,CACE,KAAK,WAAL,CAAiB,eAAjB,aADF,EAEE,OAFF;;AARC;AAAA;AAaD,oBAAI,aAAJ,GAAoB,oBAApB;AAbC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAbT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WA+BS,oBAAW,IAAX,EAA8B;AACnC,aAAO,OAAO,CAAC,IAAI,CAAC,IAAL,CAAU,OAAX,CAAd;AACD;AAjCH;;AAAA;AAAA,EAAoD,UAApD,CAAA;;AAAqB,sBAAsB,GAAA,UAAA,CAAA,CAD1C,SAC0C,CAAA,EAAtB,sBAAsB,CAAtB;eAAA,sB","sourcesContent":["import VueWrapper from '@/components/core/Vue/vue.wrapper';\r\nimport { fromNow } from '@/globals';\r\nimport {\r\n  BlogPostModel,\r\n  BlogPostService,\r\n  CoreService,\r\n  FirebaseService,\r\n  LoaderService,\r\n  Session\r\n} from '@/sdk';\r\nimport { Component } from 'vue-property-decorator';\r\n\r\n@Component\r\nexport default class YourBlogPostsComponent extends VueWrapper {\r\n  private BlogPostSrv = new BlogPostService();\r\n  private LoaderSrv = new LoaderService();\r\n  private FirebaseSrv = new FirebaseService();\r\n\r\n  public created() {\r\n    this.getBlogPosts();\r\n  }\r\n\r\n  public getBlogPosts() {\r\n    this.BlogPostSrv.getBlogPosts(new Session().SessionValue!.Id);\r\n  }\r\n\r\n  public async deletePost(postId: string) {\r\n    if (confirm('Are you sure you want to delete your post?')) {\r\n      new LoaderService().showFullScreenLoader('Deleting the post...');\r\n      try {\r\n        await this.FirebaseSrv.Db.collection('posts').doc(postId).delete();\r\n        new CoreService().showAlert('Post has been deleted successfully.');\r\n        this.getBlogPosts();\r\n      } catch (err) {\r\n        new CoreService().showAlert(\r\n          this.FirebaseSrv.getErrorMessage(err),\r\n          'error'\r\n        );\r\n      } finally {\r\n        new LoaderService().hideFullScreenLoader();\r\n      }\r\n    }\r\n  }\r\n\r\n  public getFromNow(post: BlogPostModel) {\r\n    return fromNow(post.Date.seconds);\r\n  }\r\n}\r\n"],"sourceRoot":""}]}