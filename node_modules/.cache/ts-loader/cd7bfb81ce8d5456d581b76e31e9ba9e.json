{"remainingRequest":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/thread-loader/dist/cjs.js!/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/babel-loader/lib/index.js!/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/ts-loader/index.js??ref--14-3!/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/eslint-loader/index.js??ref--13-0!/Users/kharelthompson/Coding/its-lit-app UPWORK/public/src/sdk/services/blog-post/blog-post.service.ts","dependencies":[{"path":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/src/sdk/services/blog-post/blog-post.service.ts","mtime":1618831816709},{"path":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/cache-loader/dist/cjs.js","mtime":1618827696254},{"path":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/thread-loader/dist/cjs.js","mtime":1618827696331},{"path":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/babel-loader/lib/index.js","mtime":1618827696227},{"path":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/ts-loader/index.js","mtime":1618827724380},{"path":"/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/eslint-loader/index.js","mtime":1618827722778}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/kharelthompson/Coding/its-lit-app UPWORK/public/node_modules/eslint-loader/index.js??ref--13-0!/Users/kharelthompson/Coding/its-lit-app UPWORK/public/src/sdk/services/blog-post/blog-post.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { singleton } from '@/sdk/core';\r\nimport { BlogPostModel } from '@/sdk/models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { FirebaseService } from '../firebase/firebase.service';\r\nimport { CoreService } from '../shared/core.service';\r\nimport { LoaderService } from '../shared/loader.service';\r\n\r\n@singleton\r\nexport class BlogPostService {\r\n  public BlogPosts = new BehaviorSubject<Array<BlogPostModel>>([]);\r\n  public BlogPost = new BehaviorSubject(new BlogPostModel());\r\n  private FirebaseSrv = new FirebaseService();\r\n\r\n  public async getBlogPosts(userId?: string) {\r\n    new LoaderService().showFullScreenLoader('Loading posts...');\r\n\r\n    try {\r\n      const postsRef = this.FirebaseSrv.Db.collection('/posts');\r\n      const posts: Array<BlogPostModel> = [];\r\n      (\r\n        await (userId ? postsRef.where('UserId', '==', userId) : postsRef).get()\r\n      ).docs.forEach(async snapshot => {\r\n        if (snapshot.exists) {\r\n          const post = new BlogPostModel(snapshot.data());\r\n          post.Id = snapshot.id;\r\n          const userSnap = await this.FirebaseSrv.Db.collection('users')\r\n            .doc(post.UserId)\r\n            .get();\r\n          if (userSnap.exists) {\r\n            post.User = userSnap.data() as any;\r\n          }\r\n          posts.push(post);\r\n        }\r\n      });\r\n      this.BlogPosts.next(posts);\r\n    } catch (err) {\r\n      new CoreService().showAlert(\r\n        this.FirebaseSrv.getErrorMessage(err),\r\n        'error'\r\n      );\r\n    } finally {\r\n      new LoaderService().hideFullScreenLoader();\r\n    }\r\n  }\r\n\r\n  public async getBlogPost(id: string) {\r\n    new LoaderService().showFullScreenLoader('Loading post...', true, true);\r\n\r\n    try {\r\n      const postSnap = await this.FirebaseSrv.Db.collection('posts')\r\n        .doc(id)\r\n        .get();\r\n      if (postSnap.exists) {\r\n        const post = new BlogPostModel(postSnap.data());\r\n        post.Id = postSnap.id;\r\n        const userSnap = await this.FirebaseSrv.Db.collection('users')\r\n          .doc(post.UserId)\r\n          .get();\r\n        if (userSnap.exists) {\r\n          post.User = userSnap.data() as any;\r\n        }\r\n\r\n        this.BlogPost.next(post);\r\n      }\r\n    } catch (err) {\r\n      new CoreService().showAlert(\r\n        this.FirebaseSrv.getErrorMessage(err),\r\n        'error'\r\n      );\r\n    } finally {\r\n      new LoaderService().hideFullScreenLoader();\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}]}